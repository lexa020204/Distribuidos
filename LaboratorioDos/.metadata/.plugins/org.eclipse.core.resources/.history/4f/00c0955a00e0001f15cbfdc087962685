package co.edu.upb.socketserver;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.ServerSocket;
import java.net.Socket;
import java.time.ZoneId;
import java.time.ZonedDateTime;

public class JSocketServer {

	private int port;
	private ServerSocket serverSk;
	private Socket clientSk;
	private ObjectOutputStream oos;
	private ObjectInputStream ois;

	public JSocketServer(int port) {
		this.port = port;
		try {
			this.serverSk = new ServerSocket(port, 100);
			System.out.println("[Server]: Servidor corriendo ... ");
			
		} catch (IOException e) {
			 System.err.println("[Server]: Error al iniciar el servidor: " + e.getMessage());
		}
	}
	
	
	public void listening() {
		try {

			System.out.println("\n [Server]: " + "Esperando.");
			this.clientSk = this.serverSk.accept();
			System.out.println("\n [Server]: " + "Conexi贸n exitosa.");
			
			
			this.oos = new ObjectOutputStream(this.clientSk.getOutputStream());
			this.oos.flush();
			this.ois = new ObjectInputStream(this.clientSk.getInputStream());
			
			while(true) {
				try {
					String data = (String) this.ois.readObject();
					if (data == null) {
						 System.out.println("\n[Server]: Cliente desconectado.");
						closeService();
						break;
					} else {
						 ZonedDateTime fechaHoraZona = ZonedDateTime.now(ZoneId.systemDefault());
	                        System.out.println("[Server]: HE RECIBIDO " + data + " A LAS " + fechaHoraZona);
	                        send("Escuche esto: " + data + " a las: " + fechaHoraZona);
					}
					
				} catch (Exception e) {
					System.out.println("\n [Server]: No se puede recibir la data.");
				      closeService();
	                    break; 
				}
			}
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
	 private void closeService() {
	        try {
	            if (ois != null) ois.close();
	            if (oos != null) oos.close();
	            if (clientSk != null) clientSk.close();
	            if (serverSk != null) serverSk.close();  
	            System.out.println("[Server]: Conexi贸n terminada. Servidor cerrado.");
	        } catch (IOException e) {
	            System.err.println("[Server]: Error al cerrar la conexi贸n: " + e.getMessage());
	        }
	    }

	
	private void send(String data) {
		try {
			System.out.println("\n [Server]: " + "Conexi贸n exitosa.");
			
		} catch (Exception e) {
			System.out.println("\n [Server]: No se puede enviar la data.");
		}
	}
	
	public int getPort() {
		return port;
	}

	public void setPort(int port) {
		this.port = port;
	}

}
